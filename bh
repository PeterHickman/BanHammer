#!/usr/bin/env ruby

require 'fileutils'
require 'ipaddr'

class Addresslist
  private

  def in_list?(list, match)
    new_address = IPAddr.new(match)

    list.each do |existing|
      begin
        w = IPAddr.new(existing)
        return true if w.include?(new_address)
      rescue => e
        puts "ERROR: #{new_address} in #{existing} #{e}"
      end
    end

    false
  end

  def find_entry(list, match)
    new_address = IPAddr.new(match)

    list.each do |existing|
      begin
        w = IPAddr.new(existing)
        return existing if w.include?(new_address)
      rescue => e
        puts "ERROR: #{new_address} in #{existing} #{e}"
      end
    end

    match
  end
end

class Whitelist < Addresslist
  def initialize(filename)
    @filename = filename

    @addresses = []

    load
  end

  def each(&block)
    @addresses.each(&block)
  end

  def key?(key)
    in_list?(@addresses, key)
  end

  private

  def load
    path = File.dirname(@filename)

    FileUtils.mkdir_p(path) unless File.directory?(path)

    if File.exist?(@filename)
      File.open(@filename, 'r').each do |line|
        line = line.chomp.gsub(/#.*/, '').strip
        next if line == ''
        @addresses << line.chomp
      end
    else
      FileUtils.touch(@filename)
    end
  end
end

class Blacklist < Addresslist
  def initialize(filename)
    @filename = filename

    @addresses = {}
    @changed = false

    load
  end

  def <<(key)
    return if key.nil?
    real = find_entry(@addresses.keys, key)

    @addresses[real] = Time.now.to_i
    @changed = true
  end

  def each(&block)
    @addresses.each(&block)
  end

  def key?(key)
    in_list?(@addresses.keys, key)
  end

  def delete(key)
    @addresses.delete(key)
    @changed = true
  end

  def size
    @addresses.size
  end

  def save
    return unless @changed

    f = File.open(@filename, 'w')
    @addresses.each do |ip_address, ts|
      f.puts "#{ip_address} #{ts}"
    end
    f.close

    @changed = false
  end

  private

  def load
    path = File.dirname(@filename)

    FileUtils.mkdir_p(path) unless File.directory?(path)

    if File.exist?(@filename)
      File.open(@filename, 'r').each do |line|
        ip_address, timestamp = line.chomp.split(/\s+/)
        @addresses[ip_address] = timestamp
      end
    else
      FileUtils.touch(@filename)
    end
  end
end

class Existing < Addresslist
  def initialize
    @addresses = []

    load
  end

  def key?(key)
    in_list?(@addresses, key)
  end

  def [](key)
    real = find_entry(@addresses, key)
    @addresses[real]
  end

  def <<(key)
    return if key.nil?
    return if in_list?(@addresses, key)
    UFW.add(key)
    load
  end

  private

  def load
    @addresses = UFW.load
  end
end

class ImportAuth
  RE_IP_ADDRESS = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/
  RE_FROM = / from ([^ ]+)\s+/

  def self.import(filename)
    ##
    # Filter the auth.log file and find out who has been grinding
    # at the ssh service and ban them. Only actually ban them when
    # they hit > 100 attempts
    ##

    a = Hash.new(0)

    File.open(filename, 'r').each do |line|
      next unless line.include?('sshd[')

      if line.include?('not allowed because none')
        a[strip_address(line)] += 1
      elsif line.include?(' Invalid user ')
        a[strip_address(line)] += 1
      end
    end

    addresses = []

    a.each do |ip_address, count|
      next if count < 100
      next if ip_address.nil?
      addresses << ip_address
    end

    addresses
  end

  def self.strip_address(line)
    m = RE_FROM.match(line)
    ip_address = m[1]
    return nil unless ip_address =~ RE_IP_ADDRESS
    return ip_address
  rescue
    return nil
  end
end

class ImportUFW
  def self.import(filename)
    ##
    # Filters the ufw.log file and gets a list of addresses that
    # were blocked. If any of the addresses are already in the
    # blacklist then their timestamp is bumped
    ##

    a = Hash.new(0)

    File.open(filename, 'r').each do |line|
      # We are only looking for addresses that ufw has blocked ...
      next unless line.include?('UFW BLOCK')

      # ... and they must be inbound only
      next unless line.include?('OUT= ')

      address = line.split(/\s+/).select { |x| x.index('SRC=') == 0 }

      next unless address.any?

      address = address.first.delete('SRC=')

      a[address] += 1
    end

    a
  end
end

class UFW
  def self.delete(ip_address)
    x = `ufw status numbered`

    x.split("\n").each do |line|
      next unless line.include?('DENY IN')

      x = line.split(/\s+/).last
      next unless x == ip_address

      number = line.delete('[]').strip.split(/\s+/).first
      `echo y | ufw delete #{number}`
      break
    end
  end

  def self.add(ip_address)
    `ufw insert 1 deny from #{ip_address}`
  end

  def self.load
    addresses = []

    x = `ufw status numbered`

    x.split("\n").each do |line|
      next unless line.include?('DENY IN')

      addresses << line.split(/\s+/).last
    end

    addresses
  end
end

DAY = 86_400 # Number of seconds in a day

WHITELIST = '/etc/ban_hammer/whitelist'.freeze
BLACKLIST = '/etc/ban_hammer/blacklist'.freeze

LOGFILE = '/var/log/ban_hammer.log'.freeze

def save_blacklist(ip_address = nil)
  $existing << ip_address
  $blacklist << ip_address
  $blacklist.save
end

def get_address(error_message)
  if ARGV[0].nil?
    puts error_message
    exit(1)
  end

  ARGV.shift
end

def get_filename(error_message)
  if ARGV[0].nil?
    puts error_message
    exit(1)
  end

  filename = ARGV.shift.downcase

  unless File.exist?(filename)
    puts "[#{filename}] not found"
    exit(1)
  end

  filename
end

def get_days(error_message)
  if ARGV[0].nil?
    puts error_message
    exit(1)
  end

  days = ARGV.shift

  unless days =~ /^\d+$/
    puts error_message
    exit(1)
  end

  if days == '0'
    puts error_message
    exit(1)
  end

  days
end

def usage(message = nil)
  name = File.basename($PROGRAM_NAME)

  if message
    puts "#{name}: #{message}"
    puts
  end

  puts <<-eos
#{name} add X.X.X.X
    adds X.X.X.X to the blacklist and ufw

#{name} remove X.X.X.X
    removed X.X.X.X from the blacklist and ufw

#{name} show
    shows the current blacklist and whitelist

#{name} update
    make sure that ufw contains all addresses from the blacklist

#{name} import auth /var/log/auth
    parse an auth file and ban all addresses that are grinding ssh

#{name} import ufw /var/log/ufw
    bump the timestamp of any addresses that persist trying to connect

#{name} purge X
    purge all blacklisted addresses that have been inactive for X days

eos
end

def command_update
  missing = 0

  log 'Checking that ufw is up to date'
  $blacklist.each do |ip_address, _|
    if $whitelist.key?(ip_address)
      log "#{ip_address} found in whitelist, should not be blacklisted"
      command_remove(ip_address)
      next
    end

    next if $existing.key?(ip_address)

    command_add(ip_address)
    missing += 1
  end
  log "There are #{$blacklist.size} banned addresses, #{missing} were missing"
end

def command_show
  puts "Whitelist (#{WHITELIST})"
  $whitelist.each do |ip_address|
    puts "- #{ip_address}"
  end
  puts
  puts "Blacklist (#{BLACKLIST})"
  $blacklist.each do |ip_address, _|
    puts "- #{ip_address}"
  end
  puts
end

def command_add(ip_address)
  if $whitelist.key?(ip_address)
    log "#{ip_address} is in the whitelist"
  elsif $blacklist.key?(ip_address)
    log "#{ip_address} is already blacklisted. Bumping timestamp"
    save_blacklist(ip_address)
  else
    log "#{ip_address} added to blacklist"
    save_blacklist(ip_address)
  end
end

def command_remove(ip_address)
  found = false

  if $blacklist.key?(ip_address)
    $blacklist.delete(ip_address)
    save_blacklist
    found = true
  end

  if $existing.key?(ip_address)
    UFW.delete(ip_address)
    found = true
  end

  if found
    log "#{ip_address} removed from blacklist"
  else
    log "#{ip_address} is not in the blacklist"
  end
end

def command_import_ufw(filename)
  log "Scanning ufw.log #{filename} for repeat offenders"

  a = ImportUFW.import(filename)

  a.each do |address, _|
    next unless $blacklist.key?(address)
    $blacklist << address
    log "#{address} found. Bumping timestamp"
  end
end

def command_import_auth(filename)
  log "Filtering auth.log #{filename} for addresses to ban"

  a = ImportAuth.import(filename)

  a.each do |ip_address|
    command_add(ip_address)
  end
end

def command_purge(days)
  s = days.to_i * DAY
  cut_off = Time.now.to_i - s

  log "Purging blacklist if address inactive for #{days} days"
  count = 0

  $blacklist.each do |ip_address, ts|
    next if ts.to_i > cut_off
    command_remove(ip_address)
    ##
    # Reload existing as the numbering will change. Oh this
    # was a big issue. Believe me :(
    ##
    $existing = Existing.new
    count += 1
  end

  log "#{count} removed. Blacklist has #{$blacklist.size} entries"
end

def log(message)
  ts = Time.now.strftime('%Y-%m-%d %H:%M:%S')
  $logger.puts "%s #%d: %s" % [ts, Process.pid, message]

  puts message
end

unless ARGV[0]
  usage('No command given')
  exit(1)
end

$whitelist = Whitelist.new(WHITELIST)
$blacklist = Blacklist.new(BLACKLIST)
$existing = Existing.new
$logger = File.open(LOGFILE, 'a')

cmd = ARGV.shift.downcase

case cmd
when 'update'
  command_update
when 'show'
  command_show
when 'add'
  ip_address = get_address('No address given to ban')

  command_add(ip_address)
when 'remove'
  ip_address = get_address('No address given to remove')

  command_remove(ip_address)
when 'import'
  if ARGV[0].nil?
    puts "No subcommand given for 'import', should be 'ufw' or 'auth'"
    exit(1)
  end

  sub_command = ARGV.shift.downcase

  filename = get_filename("No file given for 'import #{sub_command}'")

  case sub_command
  when 'ufw'
    command_import_ufw(filename)
  when 'auth'
    command_import_auth(filename)
  else
    puts "Unrecognised subcommand [#{sub_command}] for 'import'"
  end
when 'purge'
  days = get_days('Enter the number of days to purge > 0')

  command_purge(days)
else
  usage("Unknown command [#{cmd}]")
end
